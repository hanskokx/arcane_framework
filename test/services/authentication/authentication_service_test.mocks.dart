// Mocks generated by Mockito 5.4.5 from annotations
// in arcane_framework/test/services/authentication/authentication_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:arcane_framework/arcane_framework.dart' as _i2;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/widgets.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T, E> extends _i1.SmartFake implements _i2.Result<T, E> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeState_2<T extends _i3.StatefulWidget> extends _i1.SmartFake
    implements _i3.State<T> {
  _FakeState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_3 extends _i1.SmartFake
    implements _i3.StatefulElement {
  _FakeStatefulElement_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [ArcaneAuthInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockArcaneAuthInterface extends _i1.Mock
    implements _i2.ArcaneAuthInterface {
  MockArcaneAuthInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isSignedIn =>
      (super.noSuchMethod(
            Invocation.getter(#isSignedIn),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Result<void, String>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<_i2.Result<void, String>>.value(
              _FakeResult_0<void, String>(this, Invocation.method(#logout, [])),
            ),
          )
          as _i5.Future<_i2.Result<void, String>>);

  @override
  _i5.Future<_i2.Result<void, String>> login<T>({
    T? input,
    _i5.Future<void> Function()? onLoggedIn,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #input: input,
              #onLoggedIn: onLoggedIn,
            }),
            returnValue: _i5.Future<_i2.Result<void, String>>.value(
              _FakeResult_0<void, String>(
                this,
                Invocation.method(#login, [], {
                  #input: input,
                  #onLoggedIn: onLoggedIn,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Result<void, String>>);
}

/// A class which mocks [ArcaneEnvironmentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockArcaneEnvironmentProvider extends _i1.Mock
    implements _i2.ArcaneEnvironmentProvider {
  MockArcaneEnvironmentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get child =>
      (super.noSuchMethod(
            Invocation.getter(#child),
            returnValue: _FakeWidget_1(this, Invocation.getter(#child)),
          )
          as _i3.Widget);

  @override
  _i2.Environment get environment =>
      (super.noSuchMethod(
            Invocation.getter(#environment),
            returnValue: _i2.Environment.debug,
          )
          as _i2.Environment);

  @override
  _i3.State<_i2.ArcaneEnvironmentProvider> createState() =>
      (super.noSuchMethod(
            Invocation.method(#createState, []),
            returnValue: _FakeState_2<_i2.ArcaneEnvironmentProvider>(
              this,
              Invocation.method(#createState, []),
            ),
          )
          as _i3.State<_i2.ArcaneEnvironmentProvider>);

  @override
  _i3.StatefulElement createElement() =>
      (super.noSuchMethod(
            Invocation.method(#createElement, []),
            returnValue: _FakeStatefulElement_3(
              this,
              Invocation.method(#createElement, []),
            ),
          )
          as _i3.StatefulElement);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}
