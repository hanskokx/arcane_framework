// Mocks generated by Mockito 5.4.5 from annotations
// in arcane_framework/test/services/logging/logging_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:arcane_framework/src/services/logging/logging_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggingInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingInterface extends _i1.Mock implements _i2.LoggingInterface {
  @override
  bool get initialized =>
      (super.noSuchMethod(
            Invocation.getter(#initialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<_i2.LoggingInterface?> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<_i2.LoggingInterface?>.value(),
            returnValueForMissingStub:
                _i3.Future<_i2.LoggingInterface?>.value(),
          )
          as _i3.Future<_i2.LoggingInterface?>);

  @override
  void log(
    String? message, {
    Map<String, dynamic>? metadata,
    _i2.Level? level,
    StackTrace? stackTrace,
    Object? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #log,
      [message],
      {
        #metadata: metadata,
        #level: level,
        #stackTrace: stackTrace,
        #extra: extra,
      },
    ),
    returnValueForMissingStub: null,
  );
}
